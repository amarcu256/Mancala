import time

class Mancala:
    def __init__(self):
        self.initialize_board()
        self.current_player = 1
        self.sequence_processed = self.initialize_sequence_flags()

    def initialize_board(self):
        self.board = [4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0]

    def initialize_sequence_flags(self):
        return {"1-2-3": False, "8-8": False, "6-9": False}

    def display_board(self):
        self.print_divider()
        print("Player 2 Pool: ", self.board[13])
        print("Player 2 Side: ", self.format_side(self.board[12:6:-1]))
        print("Player 1 Side: ", self.format_side(self.board[:6]))
        print("Player 1 Pool: ", self.board[6])
        self.print_divider()

    def format_side(self, side):
        return " ".join(map(str, side))

    def print_divider(self):
        print("\n-------------------------------")

    def take_turn(self, pit):
        if not self.validate_pit(pit):
            return False

        seeds = self.board[pit]
        self.board[pit] = 0
        position = pit

        print("Sowing seeds...")
        while seeds > 0:
            position = self.increment_position(position)
            if self.should_skip_position(position):
                continue
            self.board[position] += 1
            seeds -= 1
            self.display_board()
            time.sleep(0.5)

        self.reset_sequence_flags()
        self.process_sequences()

        if self.apply_capture_rule(position):
            self.display_board()

        if self.landed_in_own_pool(position):
            print("You landed in your seed pool! Take another turn.")
            return True

        self.switch_player()
        return True

    def validate_pit(self, pit):
        if self.current_player == 1 and (pit < 0 or pit > 5):
            print("Invalid pit. Choose between 0 and 5.")
            return False
        if self.current_player == 2 and (pit < 7 or pit > 12):
            print("Invalid pit. Choose between 7 and 12.")
            return False
        if self.board[pit] == 0:
            print("Selected pit is empty.")
            return False
        return True

    def increment_position(self, position):
        return (position + 1) % 14

    def should_skip_position(self, position):
        return (self.current_player == 1 and position == 13) or (self.current_player == 2 and position == 6)

    def reset_sequence_flags(self):
        for key in self.sequence_processed:
            self.sequence_processed[key] = False

    def process_sequences(self):
        self.check_sequences_on_side(0, 6)
        self.check_sequences_on_side(7, 13)

    def check_sequences_on_side(self, start, end):
        self.check_123_sequence(start, end)
        self.check_88_sequence(start, end)
        self.check_69_sequence(start, end)

    def check_123_sequence(self, start, end):
        for i in range(start, end - 2):
            if not self.sequence_processed["1-2-3"] and self.board[i:i+3] == [1, 2, 3]:
                print("1-2-3 sequence found! Stealing seeds.")
                self.steal_seeds(i)
                self.sequence_processed["1-2-3"] = True

    def check_88_sequence(self, start, end):
        for i in range(start, end - 1):
            if not self.sequence_processed["8-8"] and self.board[i:i+2] == [8, 8]:
                print("8-8 sequence found! Swapping pits.")
                self.swap_pits(i)
                self.sequence_processed["8-8"] = True

    def check_69_sequence(self, start, end):
        player_side = self.board[start:end]
        if not self.sequence_processed["6-9"] and player_side == [6, 9]:
            print("6-9 sequence found! Swapping all pits.")
            self.swap_all_pits()
            self.sequence_processed["6-9"] = True

    def apply_capture_rule(self, last_position):
        if self.should_capture_seeds(last_position):
            opposing_pit = 12 - last_position
            captured_seeds = self.board[opposing_pit]
            self.add_to_pool(captured_seeds + 1)
            self.clear_captured_pits(last_position, opposing_pit)
            print("Capture rule! Captured seeds: ", captured_seeds + 1)
            return True
        return False

    def should_capture_seeds(self, position):
        if self.current_player == 1:
            return 0 <= position <= 5 and self.board[position] == 1
        if self.current_player == 2:
            return 7 <= position <= 12 and self.board[position] == 1
        return False

    def add_to_pool(self, seeds):
        if self.current_player == 1:
            self.board[6] += seeds
        else:
            self.board[13] += seeds

    def clear_captured_pits(self, player_pit, opposing_pit):
        self.board[player_pit] = 0
        self.board[opposing_pit] = 0

    def landed_in_own_pool(self, position):
        return (self.current_player == 1 and position == 6) or (self.current_player == 2 and position == 13)

    def switch_player(self):
        self.current_player = 2 if self.current_player == 1 else 1

    def steal_seeds(self, start_index):
        for i in range(3):
            opponent_index = 12 - (start_index + i)
            if self.board[opponent_index] >= self.board[start_index + i]:
                self.board[start_index + i] += self.board[opponent_index]
                self.board[opponent_index] = 0
                self.display_board()
                time.sleep(0.5)

    def swap_pits(self, start_index):
        for i in range(2):
            player_pit = start_index + i
            opponent_pit = 12 - player_pit
            self.swap_two_pits(player_pit, opponent_pit)

    def swap_two_pits(self, pit1, pit2):
        self.board[pit1], self.board[pit2] = self.board[pit2], self.board[pit1]
        self.display_board()
        time.sleep(0.5)

    def swap_all_pits(self):
        for i in range(6):
            self.swap_two_pits(i, 12 - i)

    def check_game_over(self):
        if self.is_game_over():
            print("Game over!")
            self.declare_winner()
            return True
        return False

    def is_game_over(self):
        return sum(self.board[:6]) == 0 or sum(self.board[7:13]) == 0

    def declare_winner(self):
        if sum(self.board[:6]) > sum(self.board[7:13]):
            print("Player 1 wins!")
        elif sum(self.board[:6]) < sum(self.board[7:13]):
            print("Player 2 wins!")
        else:
            print("It's a draw!")

    def play(self):
        print("Welcome to Marcu Mancala!")
        print("Player 1: Your seed pits are 0, 1, 2, 3, 4, 5\nPlayer 2: Your seed pits are 7, 8, 9, 10, 11, 12")
        print("\nIf a player has any seed pit sequence of 1 2 3, 8 8, or 6 9, the player with said sequence will suffer these effects:\n1 2 and 3 in a row will pull these exact amount of seeds from the\nopposing player's side from the seed pits directly across from them (if the amount exists).\n 8 and 8 will swap the player's following pit, with the opposing player's corresponding pit.\n Getting 6 and a 9 will then entirely swap the player's 6 pits (excluding their seed pool). ")
        while not self.check_game_over():
            self.display_board()
            print("Player ", self.current_player, "'s turn!")
            try:
                pit = int(input("Choose a pit: "))
                if self.take_turn(pit):
                    continue
            except ValueError:
                print("Invalid input. Enter a number.")

# Start the game
if __name__ == "__main__":
    
    game = Mancala()
    game.play()
